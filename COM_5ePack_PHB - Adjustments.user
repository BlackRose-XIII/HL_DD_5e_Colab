<?xml version="1.0" encoding="UTF-8"?>
<document signature="Hero Lab Data">
  <thing id="p5CBonusFt" name="Feats, Bonus" description="This adjustment allows you to give bonus feats to your character.  Once you have increased the amount above 1 the &quot;Feats, Bonus&quot; tab will appear allowing you to select your bonus feat." compset="InPlay">
    <usesource source="5ePHBCP"/>
    <tag group="OthAdjCat" tag="Feats"/>
    <eval phase="PreLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now & leave
      doneif (field[pIsOn].value = 0)

      ~ Increase or decrease the Max Feat One field on the new
      ~ Configurable "cfg5CFeatB".
      hero.childfound[cfg5CFeatB].field[cfgMaxF1].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="p5CRaceFt" name="Feats, Race" description="This adjustment allows you to give bonus feats to your character that will appear on the Race tab." compset="InPlay">
    <usesource source="5ePHBCP"/>
    <tag group="OthAdjCat" tag="Race"/>
    <eval phase="PreLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now & leave
      doneif (field[pIsOn].value = 0)
     
      ~ Increase or decrease the Max Race Feat value
      #resmax[resFeatRac] += field[pAdjust].value]]></eval>
    </thing>
  <thing id="p5CWepDT" name="Weapon, Damage Type" description="Select this adjustment to be able to change the type of damage a weapon does. In example change a greatsword slashing damage to cold or bludgeoning damage type." compset="InPlay">
    <fieldval field="pUsePicks2" value="1"/>
    <fieldval field="pCandExpr2" value="component.DamageType"/>
    <usesource source="5ePHBCP"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <tag group="Adjustment" tag="YourWep"/>
    <eval phase="PreLevel" priority="11000" index="2"><![CDATA[
        ~ Set custom expression to "Picks"
        field[pUsePicks].value = 1
        ~ Set custom expression to "All Things on Hero"
        field[pUsePicks2].value = 0]]></eval>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now & leave
      doneif (field[pIsOn].value = 0)
      ~ If nothing chosen get out now!
      doneif (field[pChosen].ischosen = 0)
      doneif (field[pChosen2].ischosen = 0)
     
      perform field[pChosen2].chosen.pulltags[DamTypeOvr.?]
      perform field[pChosen].chosen.pushtags[DamTypeOvr.?]]]></eval>
    </thing>
  <thing id="p5CProfAdd" name="Proficiencies" description="This adjustment allows you to increase or decrease the number of tool/skill proficiencies your character can take." compset="InPlay">
    <usesource source="5ePHBCP"/>
    <tag group="OthAdjCat" tag="SkillProf"/>
    <eval phase="PostLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now & leave
      doneif (field[pIsOn].value = 0)
     
      var NumOfProf as number
      ~ Increase or decrease the number of proficiencies 
      NumOfProf = field[pAdjust].value
      call 5CAddProf]]></eval>
    </thing>
  <thing id="p5CEqText" name="Equipment, Notes" description="Select this adjustment to allow for adding text notes (up to 100 characters) to equipment that will display as part of the items description text." compset="InPlay">
    <fieldval field="pCandExpr" value="component.MyGear &amp; !(Helper.Static|thingid.mNatural)"/>
    <fieldval field="pSource" value="Notes"/>
    <usesource source="5ePHBCP"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <tag group="Helper" tag="NoIncr"/>
    <eval phase="Final" priority="50000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Append the entered text to the gear item
      field[pChosen].chosen.field[DescAppend].text &= field[pSource].text]]></eval>
    </thing>
  <thing id="p5CwElemen" name="Weapon Elemental Dmg, Custom" description="Select this adjustment to add custom text damage next to your weapon name. &quot;(Duration)&quot; is the type of damage (ie +1d6 Fire) and &quot;(Source)&quot; is the name of the ability giving this to you (ie Flaming).\n\n{B}Note:{/b} This adjustment will NOT work correctly from the &quot;{b}Personal{/b}&quot; tab as you have to be able to type into the duration field to set the custom text." compset="InPlay">
    <fieldval field="pDuration" value="+1d6 Elemental"/>
    <usesource source="5ePHBCP"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <tag group="Adjustment" tag="YourWep"/>
    <eval phase="Final" priority="20500"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Here we are pulling the text the user entered from the 
      ~ Durattion field to set the text.
      #extradamage[field[pChosen].chosen,field[pDuration].text,field[name].text]]]></eval>
    </thing>
  <thing id="p5CwCustom" name="Custom Text: Weapon" description="Append text to the name of your weapon using the (Source) or (Duration) field. Use this to add any other related info you would like to see with when you print a character or use on the iPad. Use this to add info about Rapid Shot, Vital Strike or any other combat related info you would like to see with your weapon." compset="InPlay">
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="AdjShadow" tag="Text"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will 
      ~ either append or overwrite. We now use either Source or 
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="p5CArCusto" name="Custom Text: Armor" description="Append text to the name of your armor using the (Source) or (Duration) field. Use this to add any other related info you would like to see with when you print a character or use on the iPad." compset="InPlay">
    <usesource source="5ePHBCP"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjustment" tag="YourArmor"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="AdjShadow" tag="Text"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will 
      ~ either append or overwrite. We now use either Source or 
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="p5CEqCusto" name="Custom Text: Equipment" description="Append text to the name of your equipment using the (Source) or (Duration) field. Use this to add any other related info you would like to see with when you print a character or use on the iPad." compset="InPlay">
    <usesource source="5ePHBCP"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjustment" tag="YourGear"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="AdjShadow" tag="Text"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will 
      ~ either append or overwrite. We now use either Source or 
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="p5CSpCusto" name="Custom Text: Spell" description="Append text to the name of your spell using the (Source) or (Duration) field. Use this to add any other related info you would like to see with when you print a character or use on the iPad." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseSpell"/>
    <usesource source="5ePHBCP"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="AdjShadow" tag="Text"/>
    <tag group="OthAdjCat" tag="Spell"/>
    <eval phase="Render" priority="99999999" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will 
      ~ either append or overwrite. We now use either Source or 
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="p5CRaCusto" name="Custom Text: Race" description="Append text to the name of your race using the (Source) or (Duration) field. Use this to add any other related info you would like to see with when you print a character or use on the iPad." compset="InPlay">
    <comment>This must run at Render/999 to work.</comment>
    <fieldval field="pCandExpr" value="component.BaseRace"/>
    <usesource source="5ePHBCP"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="AdjShadow" tag="Text"/>
    <tag group="OthAdjCat" tag="Race"/>
    <eval phase="Render" priority="999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will 
      ~ either append or overwrite. We now use either Source or 
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="p5CAbCusto" name="Custom Text: Ability" description="Append text to the name of your ability (Race or Class) using the (Source) or (Duration) field. Use this to add any other related info you would like to see with when you print a character or use on the iPad." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Ability &amp; !component.BaseFeat"/>
    <usesource source="5ePHBCP"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="AdjShadow" tag="Text"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="SpecAbil"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will 
      ~ either append or overwrite. We now use either Source or 
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="p5CEqChang" name="Custom Name: Equipment" description="Overwrite the name of your equipment using the (Source) or (Duration) field. Use this to force an item to have a new name or custom name that will display on a printed character sheet or iPad." compset="InPlay">
    <usesource source="5ePHBCP"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjustment" tag="YourGear"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="AdjShadow" tag="Name"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will 
      ~ either append or overwrite. We now use either Source or 
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="p5CArChang" name="Custom Name: Armor" description="Overwrite the name of your armor using the (Source) or (Duration) field. Use this to force an item to have a new name or custom name that will display on a printed character sheet or iPad." compset="InPlay">
    <usesource source="5ePHBCP"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjustment" tag="YourArmor"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="AdjShadow" tag="Name"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will 
      ~ either append or overwrite. We now use either Source or 
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="p5CSpChang" name="Custom Name: Spell" description="Overwrite the name of your spell using the (Source) or (Duration) field. Use this to force a spell to have a new name or custom name that will display on a printed character sheet or iPad." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseSpell"/>
    <usesource source="5ePHBCP"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="AdjShadow" tag="Name"/>
    <tag group="OthAdjCat" tag="Spell"/>
    <eval phase="Render" priority="99999999" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will 
      ~ either append or overwrite. We now use either Source or 
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="p5CwChange" name="Custom Name: Weapon" description="Overwrite the name of your weapon using the (Source) or (Duration) field. Use this to force a weapon to have a new name or custom name that will display on a printed character sheet or iPad." compset="InPlay">
    <usesource source="5ePHBCP"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="AdjShadow" tag="Name"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will 
      ~ either append or overwrite. We now use either Source or 
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="p5CRaChang" name="Custom Name: Race" description="Overwrite the name of your race using the (Source) or (Duration) field. Use this to force your race to have a new name or custom name that will display on a printed character sheet or iPad." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseRace"/>
    <usesource source="5ePHBCP"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="AdjShadow" tag="Name"/>
    <tag group="OthAdjCat" tag="Race"/>
    <eval phase="First" priority="600"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will 
      ~ either append or overwrite. We now use either Source or 
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="p5CAbChang" name="Custom Name: Ability" description="Overwrite the name of an ability (Race or Class) using the (Source) or (Duration) field. Use this to force an ability to have a new name or custom name that will display on a printed character sheet or iPad." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Ability &amp; !component.BaseFeat"/>
    <usesource source="5ePHBCP"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="AdjShadow" tag="Name"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="OthAdjCat" tag="SpecAbil"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      ~ Based on the AdjShadow.? tag on this adjustment we will 
      ~ either append or overwrite. We now use either Source or 
      ~ Duration. This allows the adjustment to be used on the
      ~ Personal tab also.
      call S2SetName]]></eval>
    </thing>
  <thing id="p5CPalAuHa" name="Paladin: Aura of Hate" description="Starting at 7th level, the paladin, as well any fiends and undead within 10 feet of the paladin, gains a bonus to melee weapon damage rolls equal to the paladin&apos;s Charisma modifier (minimum of +1). A creature can benefit from this feature from only one paladin at a time. \n\n18th level, the range of this aura increases to 30 feet." compset="InPlay">
    <fieldval field="pMinimum" value="1"/>
    <usesource source="5eDMGCP"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="PostAttr" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now & leave
      doneif (field[pIsOn].value = 0)

      ~ Increase melee damage bonus
      hero.childfound[Damage].field[dmmBonus].value += field[pAdjust].value]]></eval>
    <exprreq message="Undead or Fiend creature type required."><![CDATA[#hastype[tpUndead] + #hastype[tpFiend] <> 0]]></exprreq>
    </thing>
  <thing id="p5CwFiness" name="Weapon Finesse" description="Select this adjustment to make the selected weapon be treated as if it had the finesse weapon property." compset="InPlay">
    <usesource source="5ePHBCP"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <tag group="Adjustment" tag="YourWep"/>
    <tag group="wProperty" tag="Finesse"/>
    <eval phase="PreLevel" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Push all the property tags setup on this adjustment
      ~ to the selected weapon.
      perform field[pChosen].chosen.pushtags[wProperty.?]]]></eval>
    </thing>
  <thing id="p5CClsSpAt" name="Casting Attribute" description="This adjustment allows you to change the spellcasting attribute that the selected class uses (ie make a cleric use Charisma instead of Wisdom)." compset="InPlay">
    <usesource source="5ePHBCP"/>
    <tag group="OthAdjCat" tag="Class"/>
    <tag group="Adjustment" tag="Class"/>
    <tag group="Adjust2nd" tag="Attribute"/>
    <tag group="Helper" tag="NoIncr"/>
    <eval phase="First" priority="10000"><![CDATA[      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)
      doneif (field[pChosen2].ischosen = 0)

      var searchexpr as string

      ~ Get the spell attribute tag
      perform field[pChosen2].chosen.pulltags[SplAttr.?]

      ~ Create the search expression
      searchexpr = tagids[SplAttr.?]

      ~ Reset the linkages to the chosen attribute
      perform field[pChosen].chosen.setlinkage[castattr,BaseAttr,searchexpr]
      perform field[pChosen].chosen.setlinkage[spellattr,BaseAttr,searchexpr]]]></eval>
    </thing>
  <thing id="p5CAdd1Sp" name="Add Single Spell to Class/Race" description="Use this adjustment to add a single spell from any class to any class/race on your character.  In example you could add the Hold Person spell to the Paladin spell list or to the Death Knight." compset="InPlay">
    <fieldval field="pCandExpr2" value="component.BaseSpell"/>
    <fieldval field="pCandExpr" value="component.Class|component.BaseRace"/>
    <usesource source="5ePHBCP"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Spell"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="ChooseSrc2" tag="Thing"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="Helper" tag="NoIncr"/>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)
      doneif (field[pChosen2].ischosen = 0)

      ~ Pull from the spell and push to the Class
      perform field[pChosen2].chosen.pulltags[ClsAllowSp.?]
      perform field[pChosen].chosen.pushtags[ClsAllowSp.?]]]></eval>
    </thing>
  <thing id="p5CDamExtr" name="Natural Weapon, Extra Damage" description="Use this adjustment to add extra damage text to any creatures natural attack. After adding select the natural attack, the text action of Append or Override and then type your text into the (Source) or (Duration) fields." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseNatWep"/>
    <usesource source="5ePHBCP"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Race"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Helper" tag="NoIncr"/>
    <eval phase="Final" priority="999999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)
      doneif (field[pChosen2].ischosen = 0)

      ~ 1 = Source
      ~ 2 = Duration
      var S2Type as number

      ~ Figure out if we are to use Duration or Source text
      Call S2SeleText
      
      ~ Use "Source" text
      if (S2Type = 1) then

        ~ Do we overwrite the text or append the text?
        if (field[pChosen2].chosen.tagis[5CTextAct.OverWrite] = 1) then
          field[pChosen].chosen.field[wDamExtra].text = field[pSource].text
        else
          field[pChosen].chosen.field[wDamExtra].text &= field[pSource].text
        endif
      
      ~..Use "Duration" text
      elseif (S2Type = 2) then
      
        ~ Do we overwrite the text or append the text?
        if (field[pChosen2].chosen.tagis[5CTextAct.OverWrite] = 1) then
          field[pChosen].chosen.field[wDamExtra].text = field[pDuration].text
        else
          field[pChosen].chosen.field[wDamExtra].text = field[pDuration].text
        endif
      endif]]></eval>
    </thing>
  <thing id="p5CAttEff" name="Natural Weapon, Attack Effect" description="Use this adjustment to append/override the attack text effect on a creatures creatures natural attack. After adding select the natural attack, the text action of Append or Overwrite and then type your text into the using the (Source) or (Duration) fields." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseNatWep"/>
    <fieldval field="pCandExpr2" value="component.SelectHelp &amp; Selection.5CTextAct"/>
    <usesource source="5ePHBCP"/>
    <tag group="OthAdjCat" tag="Race"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <eval phase="Final" priority="999999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)
      doneif (field[pChosen2].ischosen = 0)

      ~ 1 = Source
      ~ 2 = Duration
      var S2Type as number

      ~ Figure out if we are to use Duration or Source text
      Call S2SeleText
      
      ~ Use "Source" text
      if (S2Type = 1) then

        ~ Do we overwrite the text or append the text?
        if (field[pChosen2].chosen.tagis[5CTextAct.OverWrite] = 1) then
          field[pChosen].chosen.field[wAttackEff].text = field[pSource].text
        else
          field[pChosen].chosen.field[wAttackEff].text &= field[pSource].text
        endif
      
      ~..Use "Duration" text
      elseif (S2Type = 2) then
      
        ~ Do we overwrite the text or append the text?
        if (field[pChosen2].chosen.tagis[5CTextAct.OverWrite] = 1) then
          field[pChosen].chosen.field[wAttackEff].text = field[pDuration].text
        else
          field[pChosen].chosen.field[wAttackEff].text = field[pDuration].text
        endif
      endif]]></eval>
    </thing>
  <thing id="p5CTargTxt" name="Natural Weapon, Target" description="Use this adjustment to override or append target text on a creatures natural attack. After adding select the natural attack, the text action of Append or Override and then type your text into the (Source) or (Duration) fields." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseNatWep"/>
    <fieldval field="pCandExpr2" value="component.SelectHelp &amp; Selection.5CTextAct"/>
    <usesource source="5ePHBCP"/>
    <tag group="OthAdjCat" tag="Race"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <eval phase="Final" priority="999999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)
      doneif (field[pChosen2].ischosen = 0)

      ~ 1 = Source
      ~ 2 = Duration
      var S2Type as number

      ~ Figure out if we are to use Duration or Source text
      Call S2SeleText
      
      ~ Use "Source" text
      if (S2Type = 1) then

        ~ Do we overwrite the text or append the text?
        if (field[pChosen2].chosen.tagis[5CTextAct.OverWrite] = 1) then
          field[pChosen].chosen.field[wTarget].text = field[pSource].text
        else
          field[pChosen].chosen.field[wTarget].text &= field[pSource].text
        endif
      
      ~..Use "Duration" text
      elseif (S2Type = 2) then
      
        ~ Do we overwrite the text or append the text?
        if (field[pChosen2].chosen.tagis[5CTextAct.OverWrite] = 1) then
          field[pChosen].chosen.field[wTarget].text = field[pDuration].text
        else
          field[pChosen].chosen.field[wTarget].text = field[pDuration].text
        endif
      endif]]></eval>
    </thing>
  <thing id="p5CMutiTxt" name="Multiattack Text" description="Use this adjustment to override or append target text to a creatures multiattack text. After adding select the text action of Append or Override and then type your text into the (Source) or (Duration) fields." compset="InPlay">
    <fieldval field="pCandExpr" value="component.SelectHelp &amp; Selection.5CTextAct"/>
    <usesource source="5ePHBCP"/>
    <tag group="OthAdjCat" tag="Race"/>
    <tag group="ChooseSrc1" tag="Thing"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Helper" tag="NoIncr"/>
    <eval phase="First" priority="1"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Set our focus to the hero's race &
      perform hero.findchild[BaseRace].setfocus
      doneif (state.isfocus = 0)

      ~ 1 = Source
      ~ 2 = Duration
      var S2Type as number

      ~ Figure out if we are to use Duration or Source text
      Call S2SeleText
      
      ~ Use "Source" text
      if (S2Type = 1) then

        ~ Do we overwrite the text or append the text?
        if (field[pChosen].chosen.tagis[5CTextAct.OverWrite] = 1) then
          focus.field[rMultiatt].text = field[pSource].text
        else
          focus.field[rMultiatt].text &= field[pSource].text
        endif
      
      ~..Use "Duration" text
      elseif (S2Type = 2) then
      
        ~ Do we overwrite the text or append the text?
        if (field[pChosen].chosen.tagis[5CTextAct.OverWrite] = 1) then
          focus.field[rMultiatt].text = field[pDuration].text
        else
          focus.field[rMultiatt].text = field[pDuration].text
        endif
      endif]]></eval>
    </thing>
  <thing id="p5CSplAtDm" name="Spell Attack Dmg" description="Use this adjustment to change the name and damage of the selected &quot;Spell Attack&quot; weapon.  After adding this adjustment select the &quot;Spell Attack&quot; weapon from the dropdown and set the spell name and damage dice." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseWep &amp; thingid.w5CSpellAt"/>
    <fieldval field="pSource" value="Spell Name"/>
    <fieldval field="pDuration" value="1d4+1"/>
    <usesource source="5ePHBCP"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="AdjShadow" tag="Name"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="OthAdjCat" tag="Spell"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="NoIncr"/>
    <eval phase="Render" priority="99999999"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      field[pChosen].chosen.field[livename].text = field[pSource].text
      field[pChosen].chosen.field[sbName].text = field[pSource].text]]></eval>
    <eval phase="Final" index="2"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~if nothing's been chosen, get out now
      doneif (field[pChosen].ischosen <> 1)

      field[pChosen].chosen.field[wFixDamage].text = field[pDuration].text
      field[pChosen].chosen.field[wFixRanDam].text = field[pDuration].text]]></eval>
    </thing>
  <thing id="p5CSchMaDC" name="Spell DC, Specific School" description="This adjustment allows you to add a bonus/penalty to all your spell DCs of a specific school of magic.\n\n{b}Note:{/b} At this time 5e game system does not show individual spell DCs." compset="InPlay">
    <fieldval field="pCandExpr" value="component.SplSchool"/>
    <usesource source="5ePHBCP"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Spell"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Increase/Decrease Spell DC
      field[pChosen].chosen.field[schDC].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="p5CProfBon" name="Proficiency Bonus" description="This adjustment allows you to increase or decrease your characters Proficiency Bonus value." compset="InPlay">
    <usesource source="5ePHBCP"/>
    <tag group="OthAdjCat" tag="Misc"/>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Increase/Decrease Proficiency Bonus
      hero.child[ProfBonus].field[tProfBonus].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="p5CSpellDC" name="Spell DC, Single Spell" description="This adjustment allows you to add a bonus/penalty to the DC of a single spell.\n\n{b}Note:{/b} At this time 5e game system does not show individual spell DCs." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseSpell"/>
    <usesource source="5ePHBCP"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="OthAdjCat" tag="Spell"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <eval phase="First" priority="10000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)
      ~ If nothing's been chosen, get out now
      doneif (field[pChosen].ischosen = 0)

      ~ Increase/Decrease Spell DC
      field[pChosen].chosen.field[sDC].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="p5CRceSize" name="Race, Size Category" description="Select this adjustment to change your size category only. No other changes will be made to your character." compset="InPlay">
    <usesource source="5ePHBCP"/>
    <tag group="OthAdjCat" tag="Race"/>
    <eval phase="First" priority="20000"><![CDATA[
      ~ If we're not enabled, get out now
      doneif (field[pIsOn].value = 0)

      ~ Sizemod is the +/- change to apply to the hero's size.
      var sizemod as number

      Call 5CSizeChg]]>
      <before name="Resize Same Size Gear"/>
      </eval>
    </thing>
  <thing id="p5CRaceAbi" name="Race, Custom Ability" description="Use this adjustment to add a generic ability to your character. You will be able to set the abilities name and description text up to 100 characters." compset="InPlay">
    <fieldval field="pSource" value="Name"/>
    <fieldval field="pDuration" value="Text"/>
    <usesource source="5ePHBCP"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Race"/>
    <bootstrap thing="pS2GenAbil"></bootstrap>
    </thing>
  <thing id="pS2GenAbil" name="Generic Ability" compset="GenericAb">
    <usesource source="5ePHBCP"/>
    <tag group="Helper" tag="ShowSpec"/>
    <eval phase="Final" priority="10000"><![CDATA[
      ~ Note this component set will not be visable in the editor.
    
      ~ If we're not bootstrapped to something, get out now!
      doneif (isroot = 0)
      ~ If the root is not an adjustment, get out now!
      doneif (root.tagis[component.BaseAdjust] = 0)

      ~ Set the live name by pulling from the adjustments source
      field[livename].text = root.field[pSource].text
      
      ~ Set the custom description by pulling from the adjustments
      ~ duration field.
      field[CustDesc].text = root.field[pDuration].text]]></eval>
    </thing>
  <thing id="p5CExtAtt" name="Extra Attunement" description="Adds an extra atunement slot to the hero." compset="InPlay">
    <fieldval field="pMinimum" value="0"/>
    <tag group="OthAdjCat" tag="Equipment"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <eval phase="PostLevel" priority="20000"><![CDATA[~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)

hero.child[Totals].field[tAttunMax].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="p5CWildsha" name="Wildshape" description="Starting at 2nd level, you can use your action to magically assume the shape of a beast that you have seen before. You can use this feature twice. You regain expended uses when you finish a short or long rest.\n\nYour druid level determines the beasts you can transform into, as shown in the Beast Shapes table. At 2nd level, for example, you can transform into any beast that has a challenge rating of 1/4 or lower that doesn&apos;t have a flying or swimming speed.\n\n{b}Beast Shapes Level Max. CR Limitations                         Example{/b}\n2nd                              1/4       No flying or swimming speed Wolf \n4th                               1/2       No flying speed                    Crocodile\n8th                                1                                                   Giant eagle\n\nYou can stay in a beast shape for a number of hours equal to half your druid level (rounded down). You then revert to your normal form unless you expend another use of this feature. You can revert to your normal form earlier by using a bonus action on your turn. You automatically revert if you fall unconscious, drop to 0 hit points, or die.\n\nWhile you are transformed, the following rules apply:\n\n• Your game statistics are replaced by the statistics of the beast, but you retain your alignment, personality, and Intelligence, Wisdom, and Charisma scores. You also retain all of your skill and saving throw proficiencies, in addition to gaining those of the creature. If the creature has the same proficiency as you and the bonus in its stat block is higher than yours, use the creature&apos;s bonus instead of yours. If the creature has any legendary or lair actions, you can&apos;t use them.\n\n• When you transform, you assume the beast&apos;s hit points and Hit Dice. When you revert to your normal form, you return to the number of hit points you had before you transformed. However, if you revert as a result of dropping to 0 hit points, any excess damage carries over to your normal form. For example, if you take 10 damage in animal form and have only 1 hit point left, you revert and take 9 damage. As long as the excess damage doesn&apos;t reduce your normal form to 0 hit points, you aren&apos;t knocked unconscious.\n\n• You can&apos;t cast spells, and your ability to speak or take any action that requires hands is limited to the capabilities of your beast form. Transforming doesn&apos;t break your concentration on a spell you&apos;ve already cast, however, or prevent you from taking actions that are part of a spell, such as {i}call lightning{/i}, that you&apos;ve already cast.\n\n• You retain the benefit of any features from your class, race, or other source and can use them if the new form is physically capable of doing so. However, you can&apos;t use any of your special senses, such as darkvision, unless your new form also has that sense.\n\n• You choose whether your equipment falls to the ground in your space, merges into your new form, or is worn by it. Worn equipment functions as normal, but the GM decides whether it is practical for the new form to wear a piece of equipment, based on the creature&apos;s shape and size. Your equipment doesn&apos;t change size or shape to match the new form, and any equipment that the new form can&apos;t wear must either fall to the ground or merge with it. Equipment that merges with the form has no effect until you leave the form.\n\n{b}Combat Wild Shape{/b}\nYou gain the ability to use Wild Shape on your turn as a bonus action, rather than as an action.\n\nAdditionally, while you are transformed by Wild Shape, you can use a bonus action to expend one spell slot to regain 1d8 hit points per level of the spell slot expended." compset="InPlay">
    <comment>iValue = master.child[svINT].field[svTotal].value
    hero.child[svINT].field[svTotal].value = iValue

    iValue = master.child[svWIS].field[svTotal].value
    hero.child[svWIS].field[svTotal].value = iValue

    iValue = master.child[svCHA].field[svTotal].value
    hero.child[svCHA].field[svTotal].value = iValue</comment>
    <fieldval field="pSource" value="This minion is actually a wildshape."/>
    <fieldval field="pDuration" value="Based on Druid Level"/>
    <usesource source="5ePHBCP"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="Custom" tag="5CWildshap" name="Wildshape"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="OthAdjCat" tag="Class"/>
    <eval phase="PreLevel" priority="10000" index="3"><![CDATA[    ~ If we're not enabled, get out now
    doneif (field[pIsOn].value = 0)

    var searchexpr as string
    ~ Get list of Proficient Skills from master
    searchexpr = master.hero.tagids[ProfSkill.?,"|"]

    ~ Loop through those same skills on the hero and
    ~ apply the proficient tag.
    foreach pick in hero from BaseSkill where searchexpr
      perform eachpick.assign[Helper.Proficient]
      nexteach]]></eval>
    <eval phase="PostAttr" priority="10000"><![CDATA[    ~ If we're not enabled, get out now
    doneif (field[pIsOn].value = 0)

   ~ Set Wild Shape creature's Intelligence
    var iINT as number
    iINT = master.child[aINT].field[aFinalVal].value
    hero.child[aINT].field[aFinalVal].value = iINT
    iINT = master.child[aINT].field[aModBonus].value
    hero.child[aINT].field[aModBonus].value = iINT

    ~ Set Wild Shape creature's Wisdom
    var iWIS as number
    iWIS = master.child[aWIS].field[aFinalVal].value
    hero.child[aWIS].field[aFinalVal].value = iWIS
    iWIS = master.child[aWIS].field[aModBonus].value
    hero.child[aWIS].field[aModBonus].value = iWIS

    ~ Set Wild Shape creature's Charisma
    var iCHA as number
    iCHA = master.child[aCHA].field[aFinalVal].value
    hero.child[aCHA].field[aFinalVal].value = iCHA
    iCHA = master.child[aCHA].field[aModBonus].value
    hero.child[aCHA].field[aModBonus].value = iCHA]]></eval>
    <eval phase="PostLevel" priority="10000" index="4"><![CDATA[    ~ If we're not enabled, get out now
    doneif (field[pIsOn].value = 0)

    var iProfBon as number
    iProfBon = master.child[ProfBonus].field[tProfBonus].value

    hero.child[ProfBonus].field[tProfBonus].value = iProfBon]]></eval>
    <eval phase="PostAttr" priority="10000" index="2"><![CDATA[    ~ If we're not enabled, get out now
    doneif (field[pIsOn].value = 0)

    if (master.child[svSTR].tagis[Helper.Proficient] <> 0) then
      perform hero.child[svSTR].assign[Helper.Proficient]
    endif
    if (master.child[svDEX].tagis[Helper.Proficient] <> 0) then
      perform hero.child[svDEX].assign[Helper.Proficient]
    endif
    if (master.child[svCON].tagis[Helper.Proficient] <> 0) then
      perform hero.child[svCON].assign[Helper.Proficient]
    endif
    if (master.child[svINT].tagis[Helper.Proficient] <> 0) then
      perform hero.child[svINT].assign[Helper.Proficient]
    endif
    if (master.child[svWIS].tagis[Helper.Proficient] <> 0) then
      perform hero.child[svWIS].assign[Helper.Proficient]
    endif
    if (master.child[svCHA].tagis[Helper.Proficient] <> 0) then
      perform hero.child[svCHA].assign[Helper.Proficient]
    endif

    var iValue as number
    var iBonus as number
    var iProf as number
    iProf = #profbonus[]

    ~ Intelligence saves
    iBonus = master.child[aINT].field[aModBonus].value
    if (hero.child[svINT].tagis[Helper.Proficient] <> 0) then
      hero.child[svINT].field[svAttr].value = iBonus
      hero.child[svINT].field[svProfBon].value = iProf
    else
      hero.child[svINT].field[svAttr].value = iBonus
    endif
      
    ~ Wisdom saves
    iBonus = master.child[aWIS].field[aModBonus].value
    if (hero.child[svWIS].tagis[Helper.Proficient] <> 0) then
      hero.child[svWIS].field[svAttr].value = iBonus
      hero.child[svWIS].field[svProfBon].value = iProf
    else
      hero.child[svWIS].field[svAttr].value = iBonus
    endif

    ~ Charisma saves
    iBonus = master.child[aCHA].field[aModBonus].value
    if (hero.child[svCHA].tagis[Helper.Proficient] <> 0) then
      hero.child[svCHA].field[svAttr].value = iBonus
      hero.child[svCHA].field[svProfBon].value = iProf
    else
      hero.child[svCHA].field[svAttr].value = iBonus
    endif]]></eval>
    <exprreq message="Must be a minion"><![CDATA[tagis[system_tag.minion] <> 0]]></exprreq>
    <prereq message="Requires Wild Shape">
      <validate><![CDATA[if (master.childlives[cDrdWilSha] <>0) then
@valid = 1
endif]]></validate>
      </prereq>
    </thing>
  <thing id="p5CSplKnwn" name="Spells Known" description="Select this adjustment to add to the number of spells known for a spontaneous casting class (ie Sorcerer)." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Class &amp; CasterType.SpontKnow"/>
    <usesource source="5ePHBCP"/>
    <tag group="OthAdjCat" tag="Class"/>
    <tag group="Adjustment" tag="Class"/>
    <eval phase="First" priority="10000"><![CDATA[ ~ If we're not enabled, get out now		
doneif (field[pIsOn].value = 0)		
~ If nothing chosen, get out now		
doneif (field[pChosen].ischosen = 0)		
		
~ Increase max spells known		
field[pChosen].chosen.field[cMaxKnSpl].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="p5CSplMem" name="Spells Memorized" description="Select this adjustment to add to the number of spells memorized for spellbook classes (ie Wizard)." compset="InPlay">
    <fieldval field="pCandExpr" value="component.Class &amp; CasterType.MemBook"/>
    <usesource source="5ePHBCP"/>
    <tag group="OthAdjCat" tag="Class"/>
    <tag group="Adjustment" tag="Class"/>
    <eval phase="First" priority="10000"><![CDATA[~ If we're not enabled, get out now		
doneif (field[pIsOn].value = 0)		
~ If nothing chosen, get out now		
doneif (field[pChosen].ischosen = 0)		
		
~ Increase max spells Memorized		
field[pChosen].chosen.field[cMaxSpMem].value += field[pAdjust].value]]></eval>
    </thing>
  <thing id="p5CBckSkCh" name="Background, Skill Change" description="Use this adjustment to change the Skill Proficience that your background gives. This is useful to customize a background to your specfic character.\n\n{b}Note:{/b} The first dropdown is the list of skills your background provides.  The 2nd dropdown is the new skill you want to replace the skill with." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseSkill &amp; ProfSkill.XXXXX"/>
    <fieldval field="pCandExpr2" value="component.BaseSkill"/>
    <usesource source="5ePHBCP"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="OthAdjCat" tag="UserTop5th"/>
    <tag group="ChooseSrc1" tag="Thing"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Adjust2nd" tag="S2Custom"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="ChooseSrc2" tag="Thing"/>
    <tag group="AdjShadow" tag="Name"/>
    <eval phase="First" priority="50"><![CDATA[perform hero.findchild[Background].setfocus		
~ if can't find then get out now!		
 doneif (state.isfocus = 0)		
     		
perform focus.pulltags[ProfSkill.?]		
		
if (tagis[ProfSkill.?] <> 0) then		
     field[pCandExpr].text = "component.BaseSkill & (" & tagids[ProfSkill.?,"|"] & ")"
endif		
~ If we're not enabled, get out now		
doneif (field[pIsOn].value = 0)		
~ If nothing's been chosen, get out now		
doneif (field[pChosen].ischosen <> 1)		
doneif (field[pChosen2].ischosen <> 1)		
		
field[abText].text = field[pChosen].chosen.tagids[ProfSkill.?]
perform focus.deletestr[field[abText].text]		

field[abText2].text = field[pChosen2].chosen.tagids[ProfSkill.?]

perform focus.assignstr[field[abText2].text]]]></eval>
    </thing>
  <thing id="p5CBackgro" name="Background" description="Adjustments in this section let you change Background values." compset="InPlay" isshowonly="yes">
    <usesource source="5ePHBCP"/>
    <tag group="OthAdjCat" tag="UserTop5th"/>
    </thing>
  <thing id="p5CBckSkAd" name="Background, Skill Add" description="Use this adjustment to add an additional Skill Proficiency to your background. This is useful to customize a background to your specfic character." compset="InPlay">
    <usesource source="5ePHBCP"/>
    <tag group="AdjShadow" tag="Name"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="OthAdjCat" tag="UserTop5th"/>
    <tag group="ChooseSrc1" tag="Thing"/>
    <tag group="Adjustment" tag="Skill"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Helper" tag="AdjInfo"/>
    <eval phase="First" priority="50"><![CDATA[~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)
~ If nothing's been chosen, get out now		
doneif (field[pChosen].ischosen <> 1)

perform hero.findchild[Background].setfocus		
~ if can't find then get out now!		
doneif (state.isfocus = 0)
~ Assign new skill		

perform field[pChosen].chosen.pulltags[ProfSkill.?]		
perform focus.pushtags[ProfSkill.?]]]></eval>
    </thing>
  <thing id="p5CBckSkRe" name="Background, Skill Remove" description="Use this adjustment to change the Skill Proficience that your background gives. This is useful to customize a background to your specfic character.\n\n{b}Note:{/b} The first dropdown is the list of skills your background provides.  The 2nd dropdown is the new skill you want to replace the skill with." compset="InPlay">
    <fieldval field="pCandExpr" value="component.BaseSkill &amp; ProfSkill.XXXXX"/>
    <usesource source="5ePHBCP"/>
    <tag group="Helper" tag="AdjNoPlus"/>
    <tag group="OthAdjCat" tag="UserTop5th"/>
    <tag group="ChooseSrc1" tag="Thing"/>
    <tag group="Adjustment" tag="S2Custom"/>
    <tag group="Helper" tag="NoIncr"/>
    <tag group="Helper" tag="AdjInfo"/>
    <tag group="AdjShadow" tag="Name"/>
    <eval phase="First" priority="50"><![CDATA[perform hero.findchild[Background].setfocus		
~ if can't find then get out now!		
doneif (state.isfocus = 0)		
	
perform focus.pulltags[ProfSkill.?]
	
if (tagis[ProfSkill.?] <> 0) then		
     field[pCandExpr].text = "component.BaseSkill & (" & tagids[ProfSkill.?,"|"] & ")"
endif		
	
~ If we're not enabled, get out now		
doneif (field[pIsOn].value = 0)		
~ If nothing's been chosen, get out now		
doneif (field[pChosen].ischosen <> 1)		
  		  
field[abText].text = field[pChosen].chosen.tagids[ProfSkill.?]
perform focus.deletestr[field[abText].text]]]></eval>
    </thing>
  <thing id="p5CAttr20p" name="Ability Score (Adjust over 20)" description="Select this adjustment to change your Strength, Dexterity, Constitution, Intelligence, Wisdom or Charisma above 20." compset="InPlay">
    <fieldval field="pWhat" value="(Adjust over 20)"/>
    <usesource source="5ePHBCP"/>
    <tag group="Adjustment" tag="Attribute" name="Attributes" abbrev="Attributes"/>
    <tag group="OthAdjCat" tag="Attributes" name="Attributes" abbrev="Attributes"/>
    <eval phase="PreAttr" priority="10000"><![CDATA[
~ If we're not enabled, get out now
doneif (field[pIsOn].value = 0)
doneif (field[pChosen].ischosen = 0)

~ Add to our chosen attribute
field[pChosen].chosen.field[aNormMod].value += field[pAdjust].value
field[pChosen].chosen.field[aMaxValue].value += field[pAdjust].value

~ hard cap at 30
if (field[pChosen].chosen.field[aMaxValue].value > 30) then
  field[pChosen].chosen.field[aMaxValue].value = 30
endif]]></eval>
    </thing>
  </document>
